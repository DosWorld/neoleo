@node Forth Interpreter, Extending Oleo, Functions, Top
@chapter Forth Interpreter
@cindex Forth

@menu
* Tutorial::		Getting started
* Forth::		Implementation-specific notes on atlast
* Calling Forth::	How to invoke Forth from oleo
* Oleo words::		Forth words specific to oleo
@end menu




@node Tutorial, Forth, Forth Interpreter, Forth Interpreter
@section Tutorial
You can call call Forth from an interface like ncurses, but in this
tutorial I will show you how to interact with @code{Oleo} from the 
command line. You can use this approach to put @code{Oleo} within
a UNIX pipeline.

Start @code{Oleo} in headless mode:
@example
$ neoleo -H
@end example
You are now at a Forth interactive shell. Forth has a silly word
called @code{4life}, which sets the formula of the current cell to
the meaning of life, which we all know is `42':
@example
-> 4life
@end example

Let's print the formula for the cell to prove that we have, indeed,
set it to the value 42:
@example
-> 4prform
Formula at (1,1) is:42
@end example

Forth has a word called @code{4xcmd}, which executes the internal, non-Forth
string. For example, there is currently no word for @code{down-cell}, even though it is an @code{Oleo} command. We can make the cursor move down a cell as follows:
@example
-> "down-cell" 4xcmd
@end example

Let's prove that we moved down:
@example
-> 4prform
Formula at (2,1) is:
@end example

Instead of typing the @code{4xcmd} all the time, let's define a Forth
word to move down a cell:
@example
-> : down-cell "down-cell" 4xcmd ;
-> down-cell
-> down-cell
-> 4prform
Formula at (4,1) is:
@end example

Now let's edit a cell, first to set it's value to 16, and then to set it to the string @code{foo bar}:
@example
-> "edit-cell 16" 4xcmd 4prform
Formula at (4,1) is:16
-> "edit-cell \"foo bar\"" 4xcmd 4prform
Formula at (4,1) is:"foo bar"
@end example

Now let's quit @code{Oleo} by typing @code{Ctl-d}.



















@node Forth, Calling Forth, Tutorial, Forth Interpreter
@section Implementation-specific notes on atlast
@code{Oleo} embeds John Walker's Public domain @code{atlast}
64-bit interpreter. It uses version 2.0. Further details can be found 
@url{https://www.fourmilab.ch/atlast/, here}.
A general programming guide and words are available
@url{file://atlast2.html, here},
and is quite extensive.

Technical details for developers are outlined in Technical Release TR04,
which is within the TR directory of the source distribution.

@b{Strings} should be enclosed in double-quotes, like so:
@example
"hello world"
@end example
Unlike most Forths, `"' is not a separate word, so there is no need
to put whitespace after it at the start of the string. This 
principle also works in definitions:
@example
: hi "hello world" type cr ;
@end example
Double-quotes are placed in strings by escaping them with `\':
@example
"\"Quoth the raven\""
@end example

String are defined using @code{string}. To create the string @code{s} with 80 characters, for example:
@example
80 string s
@end example
Set it to a value, append more text, and finally print it out:
@example
-> "hello " s strcpy
-> "world"  s strcat
-> s type cr
hello world
@end example




The rest of this document only concentrates on @code{Oleo}-specific 
Forth concepts.
Only a proof-of-concept word (@code{4life}) has been added at this
stage, but it is hoped that more words will be added in due course.
The infrastructure is already there.

@node Calling Forth, Oleo words, Forth, Forth Interpreter
@section How to invoke Forth from oleo

@table @code
@item M-x forth
@cmindex forth
This command evaluates the input you supply using the Forth interpreter. For
example, set the current cell to the value `42':
@example
M-x forth <RET> 4life <RET>
@end example

A fancier example:
@example
M-x forth <RET> 2 3 + . cr <RET>
@end example
Adds 2 and 3 together to give 5. `.' prints the top of the stack: in this
case it will be 5. `cr' prints a newline. NB: 1) use `cr' to ensure the 
output is flushed to the terminal, 2) you will probably only want to 
execute the command when @code{neoleo} is using an X-windows display,
as the output will interfere with ncurses displays.

@end table

@node Oleo words, Extending Oleo, Calling Forth, Forth Interpreter
@section Forth words specific to oleo 
A list of @code{Oleo}-specific words now follows.


@table @code
@item 4included
@fsindex 4included
@code{( str -- )} Loads and executes a Forth file identified in `str'.

Example:
@example
"simple.fs" included \ gives a dictionary which defines `gnu'
gnu 
---
Output:

  ,           ,    
 /             \   
((__-^^-,-^^-__))  
 `-_---' `---_-'   
  `--|o` 'o|--'    
       `  /       
      ): :(        
      :o_o:        
       "-"         

@end example
@end table

@table @code
@item 4life
@fsindex 4life ( -- )
@code{( -- )} Sets the current cell to `42'. Currently only useful only as a 
proof-of-concept, of course.
@end table



@table @code
@item 4prform
@fsindex 4prform
@code{( -- )} Prints the formula at the current cell, together with the
cell row and number.

Example:
@example
4life \ set the current cell to 42
4prform 
---
Output:
Formula at (1,1) is:42
@end example
@end table




@table @code
@item 4system
@fsindex 4system
@code{( str -- )} Execute a shell command. For example, list all the files in
the current directory:
@example
"ls -1" 4system
@end example
@end table




@table @code
@item 4xcmd
@fsindex 4xcmd
@code{( str -- )} Executes the @code{oleo} command given in `str'. Example:
@example
"down-cell" 4xcmd
@end example
moves the cursor down a cell. 

@code{4xcmd} is fairly inefficient in the sense that it calls two
interpreters: Forth, and then the in-built @code{oleo} one. However,
it does mean that whatever a command can do, Forth can do.
@end table
